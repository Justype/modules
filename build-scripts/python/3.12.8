#!/usr/bin/bash
#WHATIS:Python 3 with pip (Anaconda Build)

#########################################################
# Python 3.12.8
# - Anaconda Build
# - Version dependent script!
#########################################################

install_app() {
    # mkdir -p "$target_base_dir"  # modules/apps/name
    mkdir -p "$target_dir"       # modules/apps/name/version
    mkdir -p "$tmp_dir"          # tmp directory
    cd "$tmp_dir"

    install_annaconda_package python 3.12.8
    install_annaconda_package bzip2 1.0.8
    install_annaconda_package expat 2.7.1
    install_annaconda_package libffi 3.4.4
    install_annaconda_package libgcc-ng 12.2.0 # Linux only
    install_annaconda_package libuuid 1.41.5
    install_annaconda_package ncurses 6.4
    install_annaconda_package openssl 3.0.16
    install_annaconda_package readline 8.2
    install_annaconda_package sqlite 3.45.3
    install_annaconda_package tk 8.6.14
    install_annaconda_package tzdata 2025a
    install_annaconda_package xz 5.6.4
    install_annaconda_package zlib 1.2.13

    # Python pip
    install_annaconda_package_for_py312 pip 25.0
    install_annaconda_package_for_py312 setuptools 75.8.0
    install_annaconda_package_for_py312 wheel 0.45.1

    # Python packaging
    install_annaconda_package_for_py312 packaging 24.2
}

special_modulefiles() {
    # Any additional modulefile operations: add environment variables, aliases, etc.
    # app_root is a special variable that points to the app directory in modulefile[.lua]
    return
}

install_annaconda_package() {
    print_stderr "Installing ${YELLOW}${1}/${2}${NC} Anaconda Build"
    url=$(get_annaconda_url $1 $2)
    if [ $url == "https:" ]; then return; fi
    run_command wget -q -O "${app_name}_${version}.tar.bz2" "$url"
    tar xf "${app_name}_${version}.tar.bz2" -C "$target_dir"
}

install_annaconda_package_for_py312() {
    print_stderr "Installing ${YELLOW}${1}/${2}${NC} Anaconda Build"
    url=$(get_annaconda_url_for_py_version $1 312 $2)
    if [ $url == "https:" ]; then return; fi
    run_command wget -q -O "${app_name}_${version}.tar.bz2" "$url"
    tar xf "${app_name}_${version}.tar.bz2" -C "$target_dir"
}

get_annaconda_url() {
    # $1 is the name
    # $2 is the version (optional)
    local name=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    local version=$2

    # If version is empty, get the latest version
    if [ -z "$version" ]; then
        version=$(curl -s "https://api.anaconda.org/package/anaconda/$name" | jq -r \
            --arg platform $(uname -s | tr '[:upper:]' '[:lower:]') \
            --arg arch $(uname -m) \
            '.files[] | select((.attrs.platform // $platform) == $platform and (.attrs.arch // $arch) == $arch) | .attrs.version' | \
            sort -V | tail -n 1)
    fi

    echo https:$(curl -s "https://api.anaconda.org/package/anaconda/$name" | jq -r \
        --arg version "$version" \
        --arg platform $(uname -s | tr '[:upper:]' '[:lower:]') \
        --arg arch $(uname -m) \
        '.files[] | select(.attrs.version == $version and (.attrs.platform // $platform) == $platform and (.attrs.arch // $arch) == $arch) | .download_url' | \
        tail -n 1)
}

get_annaconda_url_for_py_version() {
    # $1 is the name
    # $2 is the python version: 39, 310, 311, 312, 313
    # $3 is the version (optional)
    local name=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    local pyversion=py$2
    local version=$3

    # If version is empty, get the latest version
    # If the basename includes py312, it means this library is for Python 3.12
    if [ -z "$version" ]; then
        version=$(curl -s "https://api.anaconda.org/package/anaconda/$name" | jq -r \
            --arg platform $(uname -s | tr '[:upper:]' '[:lower:]') \
            --arg arch $(uname -m) \
            --arg py $pyversion \
            '.files[] | select((.attrs.platform // $platform) == $platform and (.attrs.arch // $arch) == $arch and (.basename | contains($py))) | .attrs.version' | \
            sort -V | tail -n 1)
    fi

    echo https:$(curl -s "https://api.anaconda.org/package/anaconda/$name" | jq -r \
        --arg version "$version" \
        --arg platform $(uname -s | tr '[:upper:]' '[:lower:]') \
        --arg arch $(uname -m) \
        --arg py $pyversion \
        '.files[] | select(.attrs.version == $version and (.attrs.platform // $platform) == $platform and (.attrs.arch // $arch) == $arch and (.basename | contains($py))) | .download_url' | \
        tail -n 1)
}

# Available variables:
# - ncpu: number of cores to use (default: 4) will be overwritten by SLURM_CPUS_PER_TASK

# - app_name:         name     of the app
# - version:          version  of the app
# - app_name_version: name/version

# - target_base_dir:  modules/apps/name
# - target_dir:       modules/apps/name/version
# - script_path:      modules/modulefiles/name/version
# - tmp_dir:          tmp directory (modules/tmp/name/version)

RED='\033[0;91m'    # Red      WARNING or ERROR
BLUE='\033[0;94m'   # Blue     Dependency or Modulefile Changes
YELLOW='\033[0;93m' # Yellow   App Name and/or Version
NC='\033[0m'        # No Color

if ! [ -d build-scripts ]; then
    printf "Please run this script under ${RED}modules${NC} directory.\n" 1>&2
    printf "And make sure you have your scripts in build-scripts folder.\n" 1>&2
    printf "    e.g. bash build-scripts/sra-tools/3.1.1\n" 1>&2
    exit 1
fi

source "build-scripts/common.sh"
main $@
