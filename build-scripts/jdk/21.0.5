#!/usr/bin/bash
#SBATCH --cpus-per-task=1
#SBATCH --time=6:00:00
#SBATCH --mem=2GB
#SBATCH --job-name=make
#SBATCH --output=build_%j.out

# jdk
ncpu=${SLURM_CPUS_PER_TASK:-1} # number of cores to use

#region CONFIGS
# Define color codes
RED='\033[0;31m'
NC='\033[0m'     # No Color

if ! [ -d build-scripts ]; then
    printf "Please run this script under ${RED}modules${NC} directory.\n"
    printf "And make sure you have your scripts in build-scripts folder.\n"
    printf "    e.g. bash build-scripts/sra-tools/3.1.1\n"
    exit
fi

modules_root="$(pwd -P)"
script_path="$(realpath "$0")"
app_name_version="${script_path#*/build-scripts/}" # app/version
app_name="${app_name_version%/*}"                  # app
version="${app_name_version##*/}"                  # version

app_base_dir="${modules_root}/${app_name}"         # modules/app
target_dir="${modules_root}/${app_name_version}"   # modules/app/version
script_base_dir="${modules_root}/modulefiles/${app_name}"        # modulefiles/app
script_path="${modules_root}/modulefiles/${app_name_version}"    # modulefiles/app/version

# Parse the parameters
while getopts ":hd" opt; do
    case ${opt} in
        h )
            echo "Usage: bash $0 [-h]"
            echo "Options:"
            echo "  -h  Display this help message."
            echo "  -d  Delete the target module."
            exit 0
            ;;
        d )
            printf "[`date +"%Y-%m-%d %T"`] Deleting the target module: $target_dir\n"
            # if target directory does not exist, exit 1
            if [ ! -d "$target_dir" ]; then
                printf "[`date +"%Y-%m-%d %T"`] ${RED}ERROR${NC}: Target app does not exist!\n"  1>&2
                printf "[`date +"%Y-%m-%d %T"`] Exit Removing\n"
                exit 1
            fi

            # modules/app/version
            rm -rf "$target_dir"
            # modulefiles/app/version
            rm -rf "$script_path"
            rm -rf "${script_path}.lua"

            # If the app directory is empty, remove it
            if [ -z "$(ls -A $app_base_dir)" ]; then
                printf "[`date +"%Y-%m-%d %T"`] App directory is empty. Removing $app_base_dir\n"
                rm -rf "$app_base_dir"
            fi
            # If the modulefiles/app directory is empty, remove it
            if [ -z "$(ls -A $script_base_dir)" ]; then
                printf "[`date +"%Y-%m-%d %T"`] Modulefiles directory is empty. Removing $script_base_dir\n"
                rm -rf "$script_base_dir"
            fi
            exit
            ;;
        \? )
            echo "Invalid Option: -$OPTARG" 1>&2
            exit 1
            ;;
    esac
done

printf "[`date +"%Y-%m-%d %T"`] Start building ${RED}${app_name}${NC} version ${RED}${version}${NC}\n"
printf "[`date +"%Y-%m-%d %T"`] Target App Directory: $target_dir\n"
printf "[`date +"%Y-%m-%d %T"`] Target Module Script Path: $script_path\n"

if [ -d "$target_dir" ]; then
    printf "[`date +"%Y-%m-%d %T"`] ${RED}ERROR${NC}: Target app exists!\n"  1>&2
    printf "[`date +"%Y-%m-%d %T"`] Exit Building\n"
    exit 1
fi

# Function to run a command and exit if it fails
run_command() {
    "$@"
    if [ $? -ne 0 ]; then
        echo "[`date +"%Y-%m-%d %T"`] Command failed: $@"
        echo "[`date +"%Y-%m-%d %T"`] Possible Reason: Missing dependencies or Expired links"
        echo "[`date +"%Y-%m-%d %T"`] PWD: `pwd`"
        echo "[`date +"%Y-%m-%d %T"`] Removing target directory: $target_dir"
        rm -rf "$target_dir"
        exit 1
    fi
}
#endregion CONFIGS

#region BUILD SCRIPT
mkdir -p "$app_base_dir"  # modules/app

printf "[`date +"%Y-%m-%d %T"`] Downloading ${RED}${app_name}${NC} version ${RED}${version}${NC}\n"
# Get main version from the version string
main_version=${version%%.*}

# Determine the machine architecture
machine_arch=$(uname -m)
if [ "$machine_arch" == "x86_64" ]; then
    machine_arch="x64"
fi

url="https://download.oracle.com/java/${main_version}/archive/jdk-${version}_linux-${machine_arch}_bin.tar.gz"
run_command wget -nv -O "jdk-${version}_linux-${machine_arch}_bin.tar.gz" "$url"

printf "[`date +"%Y-%m-%d %T"`] Unzipping ${RED}${app_name}${NC} version ${RED}${version}${NC}\n"
tar xf "jdk-${version}_linux-${machine_arch}_bin.tar.gz"
mv "jdk-${version}" "${target_dir}"
rm "jdk-${version}_linux-${machine_arch}_bin.tar.gz"
#endregion BUILD SCRIPT

#region Copying modulefiles
printf "[`date +"%Y-%m-%d %T"`] Copying modulefiles\n"
mkdir -p "$script_base_dir"
if [ -f "${modules_root}/build-scripts/${app_name}/template" ]; then
    printf "[`date +"%Y-%m-%d %T"`] $app_name specific template exists. Use it.\n"
    cp "${modules_root}/build-scripts/${app_name}/template" "$script_path"
    cp "${modules_root}/build-scripts/${app_name}/template.lua" "${script_path}.lua"
else
    printf "[`date +"%Y-%m-%d %T"`] $app_name specific template does not exist. Use default template.\n"
    cp "${modules_root}/build-scripts/template" "$script_path"
    cp "${modules_root}/build-scripts/template.lua" "${script_path}.lua"
fi
#endregion

printf "[`date +"%Y-%m-%d %T"`] End building ${RED}${app_name}${NC} version ${RED}${version}${NC}\n"
