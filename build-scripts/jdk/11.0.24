#!/usr/bin/bash

# jdk download script (Microsoft OpenJDK)

#region CONFIGS
# Define color codes
RED='\033[0;31m'
NC='\033[0m'     # No Color

print_stderr() {
    printf "[`date +"%Y-%m-%d %T"`] $1\n" 1>&2
}

help_message() {
    echo "Usage: bash $0 [options]" 1>&2
    echo "Options:" 1>&2
    echo "  -i  Install the target module." 1>&2
    echo "  -d  Delete the target module." 1>&2
    echo "  -s  Set this version as the default version." 1>&2
    echo "  -h  Help message." 1>&2
    exit 0
}

if ! [ -d build-scripts ]; then
    printf "Please run this script under ${RED}modules${NC} directory.\n" 1>&2
    printf "And make sure you have your scripts in build-scripts folder.\n" 1>&2
    printf "    e.g. bash build-scripts/sra-tools/3.1.1\n" 1>&2
    exit 1
fi

if [ "$#" -eq 0 ]; then
    help_message
    exit 0
fi

modules_root="$PWD"
script_path="$(realpath --no-symlinks "$0")"
app_name_version="${script_path#*/build-scripts/}" # name/version
app_name="${app_name_version%/*}"                  # name
version="${app_name_version##*/}"                  # version

app_base_dir="${modules_root}/apps/${app_name}"         # modules/apps/name
target_dir="${modules_root}/apps/${app_name_version}"   # modules/apps/name/version
script_base_dir="${modules_root}/modulefiles/${app_name}"      # modules/modulefiles/name
script_path="${modules_root}/modulefiles/${app_name_version}"  # modules/modulefiles/name/version

tmp_dir="${modules_root}/tmp/${app_name_version}" # tmp directory

# Parse the parameters
while getopts ":idhs" opt; do
    case ${opt} in
        h ) help_message ;;
        d )
            print_stderr "Deleting the target module: $target_dir"
            # if target directory does not exist, exit 1
            if [ ! -d "$target_dir" ]; then
                print_stderr "${RED}ERROR${NC}: Target app does not exist!"
                print_stderr "Exit Removing"
                exit 1
            fi

            # modules/apps/name/version
            rm -rf "$target_dir"
            # modulefiles/name/version
            rm -rf "$script_path"
            rm -rf "${script_path}.lua"

            # If the modules/apps/name directory is empty, remove it
            if [ -z "$(ls -A $app_base_dir)" ]; then
                print_stderr "App directory is empty. Removing $app_base_dir"
                rm -rf "$app_base_dir"
            fi
            # If the modulefiles/name directory is empty, remove it
            if [ -z "$(ls -A $script_base_dir)" ]; then
                print_stderr "Modulefiles directory is empty. Removing $script_base_dir"
                rm -rf "$script_base_dir"
            fi
            exit
            ;;
        s )
            print_stderr "Setting this version as the default version: $target_dir"
            # if target directory does not exist, exit 1
            if [ ! -d "$target_dir" ]; then
                print_stderr "${RED}ERROR${NC}: Target app does not exist!"
                print_stderr "Exit Setting Default"
                exit 1
            fi

            # Create .version file under modulefiles/name
            echo "#%Module" > "${script_base_dir}/.version"
            echo "set ModulesVersion $version" >> "${script_base_dir}/.version"
            exit
            ;;
        \? )
            echo "Invalid Option: -$OPTARG" 1>&2
            exit 1
            ;;
    esac
done

print_stderr "Start building ${RED}${app_name}${NC} version ${RED}${version}${NC}"
print_stderr "Target App Directory: $target_dir"
print_stderr "Target Module Script Path: $script_path"

if [ -d "$target_dir" ]; then
    print_stderr "${RED}ERROR${NC}: Target app exists!"
    print_stderr "Exit Building"
    exit 1
fi

# Function to clean up the temporary directory
clean_up () {
    cd "$modules_root"
    sleep 1 # wait for the release of the file handle
    # if $1 is 1, building failed. Do not remove the temporary directory
    if [ "$1" == 1 ]; then
        print_stderr "Removing target directory: $target_dir"
        rm -rf "$target_dir"
    # successful building. Remove the temporary directory if it exists
    elif [ -d "$tmp_dir" ]; then
        print_stderr "Removing temporary directory: $tmp_dir"
        # keep deleting empty directories until the $module_root dir
    rm -rf "$tmp_dir"
        del_dir="$(dirname $tmp_dir)"
        while [ "$del_dir" != "$modules_root" ]; do
            if [ -z "$(ls -A $del_dir)" ]; then
                print_stderr "Parent directory is empty. Removing $del_dir"
                rmdir "$del_dir"
                del_dir="$(dirname "$del_dir")"
            else
                break
            fi
        done
    fi
}
# run the command in a sub shell to avoid issues when cleaning up
# cp mv wget or other file operations
sub_shell() {
    msg=$($@)
    result=$?
    if [ -n "$msg" ]; then
        print_stderr "$msg"
    fi
    return $result
}
# Function to run a command and exit if it fails
run_command() {
    sub_shell $@
    if [ $? -ne 0 ]; then
        print_stderr "${RED}ERROR${NC}: Command failed: $@"
        print_stderr "Possible Reason: Missing dependencies or Expired links"
        print_stderr "PWD: `pwd`"
        clean_up 1
        exit 1
    fi
}
#endregion CONFIGS

#region BUILD SCRIPT
# mkdir -p "$app_base_dir"  # modules/apps/name
mkdir -p "$target_dir"    # modules/apps/name/version
mkdir -p "$tmp_dir"       # tmp directory
cd "$tmp_dir"

print_stderr "Downloading ${app_name} version ${version}"
# Get main version from the version string
main_version=${version%%.*}

# Determine the machine architecture
machine_arch=$(uname -m)
if [ "$machine_arch" == "x86_64" ]; then
    machine_arch="x64"
fi

# Oracle JDK (need to accept the license, cannot download version 11)
# url="https://download.oracle.com/java/${main_version}/archive/jdk-${version}_linux-${machine_arch}_bin.tar.gz" 
url="https://aka.ms/download-jdk/microsoft-jdk-${version}-linux-${machine_arch}.tar.gz" # Switch to Microsoft OpenJDK
run_command wget -nv -O "jdk-${version}_linux-${machine_arch}.tar.gz" "$url"

print_stderr "Unzipping ${app_name} version ${version}"
tar xf "jdk-${version}_linux-${machine_arch}.tar.gz"
sub_shell mv *jdk-${version}*/* "$target_dir"
#endregion BUILD SCRIPT

#region Copying modulefiles
print_stderr "Copying modulefiles"
mkdir -p "$script_base_dir"
if [ -f "${modules_root}/build-scripts/${app_name}/template" ]; then
    print_stderr "$app_name specific template exists. Use it."
    cp "${modules_root}/build-scripts/${app_name}/template" "$script_path"
    cp "${modules_root}/build-scripts/${app_name}/template.lua" "${script_path}.lua"
else
    print_stderr "$app_name specific template does not exist. Use default template."
    cp "${modules_root}/build-scripts/template" "$script_path"
    cp "${modules_root}/build-scripts/template.lua" "${script_path}.lua"
fi
#endregion

print_stderr "Building succeeded."
clean_up
print_stderr "End building ${RED}${app_name}${NC} version ${RED}${version}${NC}"
