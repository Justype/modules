#!/usr/bin/bash
#DEPENDENCY:jdk/1.8*
#DEPENDENCY:ant/*
#WHATIS:Quality control for sam/bam (alignment) files

#########################################################
# BamQC
# - BAM QC analysis tool
# - https://github.com/s-andrews/BamQC
# - https://stab.st-andrews.ac.uk/wiki/index.php/BamQC
#########################################################

install_app() {
    # mkdir -p "$target_base_dir"  # modules/apps/name
    mkdir -p "$target_dir"       # modules/apps/name/version
    mkdir -p "$tmp_dir"          # tmp directory
    cd "$tmp_dir"

    print_stderr "Cloning ${YELLOW}${app_name_version}${NC}"
    if [ -d BamQC ]; then
        print_stderr "BamQC directory already exists. Skipping git clone."
    else
        run_command git clone https://github.com/s-andrews/BamQC
    fi

    print_stderr "Loading ${YELLOW}jdk/1.8${NC} and ${YELLOW}ant${NC} modules"
    module purge
    module load jdk/1.8.0 ant/1.10.15
    
    print_stderr "Building ${YELLOW}${app_name_version}${NC}"
    cd BamQC
    git checkout 4b3d20f
    run_command ant
    chmod +x bin/bamqc

    print_stderr "Copying ${YELLOW}${app_name_version}${NC} to ${YELLOW}${target_dir}${NC}"
    cp -r bin "$target_dir"
}

special_modulefiles() {
    # Any additional modulefile operations: add environment variables, aliases, etc.
    # app_root is a special variable that points to the app directory in modulefile[.lua]
    # remove module load ant from modulefile
    print_stderr "Removing ${BLUE}ant${NC} dependency load from ${YELLOW}modulefile[.lua]${NC}"
    sed -i '/ant/d' "${script_path}"
    sed -i '/ant/d' "${script_path}.lua"
    return
}

# Available variables:
# - ncpu: number of cores to use (default: 4) will be overwritten by SLURM_CPUS_PER_TASK

# - app_name:         name     of the app
# - version:          version  of the app
# - app_name_version: name/version

# - target_base_dir:  modules/apps/name
# - target_dir:       modules/apps/name/version
# - script_path:      modules/modulefiles/name/version
# - tmp_dir:          tmp directory (modules/tmp/name/version)

RED='\033[0;91m'    # Red      WARNING or ERROR
BLUE='\033[0;94m'   # Blue     Dependency or Modulefile Changes
YELLOW='\033[0;93m' # Yellow   App Name and/or Version
NC='\033[0m'        # No Color

if ! [ -d build-scripts ]; then
    printf "Please run this script under ${RED}modules${NC} directory.\n" 1>&2
    printf "And make sure you have your scripts in build-scripts folder.\n" 1>&2
    printf "    e.g. bash build-scripts/sra-tools/3.1.1\n" 1>&2
    exit 1
fi

source "build-scripts/common.sh"
main $@
