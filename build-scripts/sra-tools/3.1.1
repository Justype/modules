#!/usr/bin/bash
#SBATCH --cpus-per-task=1
#SBATCH --time=6:00:00
#SBATCH --mem=2GB
#SBATCH --job-name=make
#SBATCH --output=build_%j.out

# This script will create and delete tmp folder!
ncpu=${SLURM_CPUS_PER_TASK:-4} # number of cores to use

#region CONFIGS
# Define color codes
RED='\033[0;31m'
NC='\033[0m'     # No Color

if ! [ -d build-scripts ]; then
    printf "Please run this script under ${RED}modules${NC} directory.\n"
    printf "And make sure you have your scripts in build-scripts folder.\n"
    printf "    e.g. bash build-scripts/sra-tools/3.1.1\n"
    exit
fi

modules_root="$(pwd -P)"
script_path="$(realpath "$0")"
app_name_version="${script_path#*/build-scripts/}"
app_name="${app_name_version%/*}"
version="${app_name_version##*/}"
printf "[`date +"%Y-%m-%d %T"`] Start building ${RED}${app_name}${NC} version ${RED}${version}${NC}\n"

target_dir="${modules_root}/${app_name_version}"
script_base_dir="${modules_root}/modulefiles/${app_name}"
script_path="${modules_root}/modulefiles/${app_name_version}"
printf "[`date +"%Y-%m-%d %T"`] Target App Directory: $target_dir\n"
printf "[`date +"%Y-%m-%d %T"`] Target Module Script Path: $script_path\n"

if [ -d "$target_dir" ]; then
    printf "[`date +"%Y-%m-%d %T"`] WARNING: Target app exists!\n"
    printf "[`date +"%Y-%m-%d %T"`] Exit Building\n"
    exit
fi

# Function to run a command and exit if it fails
run_command() {
    "$@"
    if [ $? -ne 0 ]; then
        echo "[`date +"%Y-%m-%d %T"`] Command failed: $@"
        echo "[`date +"%Y-%m-%d %T"`] PWD: `pwd`"
        echo "[`date +"%Y-%m-%d %T"`] Removing target directory: $target_dir"
        rm -rf "$target_dir"
        exit 1
    fi
}
#endregion CONFIGS

#region BUILD SCRIPT
soft_dir="${modules_root}/${app_name}"
mkdir -p "$soft_dir"

# if this machine is x64 and fedora based or debian based, directly install the binary
flag_install_binary=false

if [ "$(uname -m)" == "x86_64" ]; then
    distro=$(grep -E '^ID_LIKE=' /etc/os-release | cut -d= -f2 | tr -d '"')
    if [ "$distro" == "fedora" ]; then
        printf "[`date +"%Y-%m-%d %T"`] This is a x64 Fedora based machine. Install binary directly.\n"
        flag_install_binary=true
        url="https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/${version}/sratoolkit.${version}-centos_linux64.tar.gz"
        run_command wget --no-verbose -O "sratoolkit.${version}-centos_linux64.tar.gz" "$url" # download binary
        tar xfz "sratoolkit.${version}-centos_linux64.tar.gz" --overwrite
        rm -rf "sratoolkit.${version}-centos_linux64.tar.gz"
        mv "sratoolkit.${version}-centos_linux64" "${soft_dir}/${version}"

    elif [ "$distro" == "debian" ]; then
        printf "[`date +"%Y-%m-%d %T"`] This is a x64 Debian based machine. Install binary directly.\n"
        flag_install_binary=true
        url="https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/${version}/sratoolkit.${version}-ubuntu64.tar.gz"
        run_command wget --no-verbose -O "sratoolkit.${version}-ubuntu64.tar.gz" "$url" # download binary
        tar xfz "sratoolkit.${version}-ubuntu64.tar.gz" --overwrite
        rm -rf "sratoolkit.${version}-ubuntu64.tar.gz"
        mv "sratoolkit.${version}-ubuntu64" "${soft_dir}/${version}"
    fi
fi

# if the binary is installed, skip the source code installation
if [ "$flag_install_binary" != true ]; then
    printf "[`date +"%Y-%m-%d %T"`] This is not a x64 Fedora or Debian based machine. Install from source code.\n"

    tmp_dir="${modules_root}/tmp"
    mkdir -p "$tmp_dir"

    # modules/tmp
    cd $tmp_dir

    #region ncbi-vdb
    echo [`date +"%Y-%m-%d %T"`] Building ncbi/ncbi-vdb $version

    vdb_path="ncbi-vdb"
    wget --no-verbose -O "${vdb_path}.tar.gz" "https://github.com/ncbi/ncbi-vdb/archive/refs/tags/${version}.tar.gz"
    tar xfz "${vdb_path}.tar.gz" --overwrite
    mv "${vdb_path}-${version}" "${vdb_path}"

    # modules/tmp/ncbi-vdb
    cd "${vdb_path}"
    ./configure --build-prefix="${tmp_dir}/build"
    run_command make

    # modules/tmp
    cd ..
    #endregion

    #region sra-tools
    echo [`date +"%Y-%m-%d %T"`] Building ncbi/sra-tools $version
    sra_path="sra-tools"
    wget --no-verbose -O "${sra_path}.tar.gz" "https://github.com/ncbi/sra-tools/archive/refs/tags/${version}.tar.gz"
    tar xfz "${sra_path}.tar.gz" --overwrite
    mv "${sra_path}-${version}" "${sra_path}"

    # modules/tmp/sra-tools
    cd "${sra_path}"
    ./configure --build-prefix="${tmp_dir}/build" --prefix="${target_dir}"
    run_command make # make sure ncbi-vdb in the same parent folder
    make install
    #endregion

    echo [`date +"%Y-%m-%d %T"`] Cleaning tmp directory
    cd "${modules_root}"
    rm -rf "${tmp_dir}"
fi
#endregion BUILD SCRIPT

#region Copying modulefiles
printf "[`date +"%Y-%m-%d %T"`] Copying modulefiles\n"
mkdir -p "$script_base_dir"
if [ -f "${modules_root}/build-scripts/${app_name}/template" ]; then
    printf "[`date +"%Y-%m-%d %T"`] $app_name specific template exists. Use it.\n"
    cp "${modules_root}/build-scripts/${app_name}/template" "$script_path"
    cp "${modules_root}/build-scripts/${app_name}/template.lua" "${script_path}.lua"
else
    printf "[`date +"%Y-%m-%d %T"`] $app_name specific template does exist. Use default template.\n"
    cp "${modules_root}/build-scripts/template" "$script_path"
    cp "${modules_root}/build-scripts/template.lua" "${script_path}.lua"
fi
#endregion

printf "[`date +"%Y-%m-%d %T"`] End building ${RED}${app_name}${NC} version ${RED}${version}${NC}\n"
