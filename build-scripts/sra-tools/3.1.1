#!/usr/bin/bash

#########################################################
# SRA-Tools build script
# - https://github.com/ncbi/sra-tools/
# - Download binary if x64 Debian-based or Fedora-based machine
# - Build from source code otherwise
#########################################################

install_app() {
    mkdir -p "$target_base_dir"  # modules/apps/name
    mkdir -p "$tmp_dir"          # tmp directory
    cd "$tmp_dir"

    # if this machine is x64 and fedora based or debian based, directly install the binary
    flag_install_binary=false
    if [ "$(uname -m)" == "x86_64" ]; then
        distro=$(grep -E '^ID_LIKE=' /etc/os-release | cut -d= -f2 | tr -d '"')
        if [ "$distro" == "fedora" ]; then
            print_stderr "This is a x64 Fedora/RedHat based machine. Install binary directly."
            flag_install_binary=true
            url="https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/${version}/sratoolkit.${version}-centos_linux64.tar.gz"
            run_command wget --no-verbose -O "sratoolkit.${version}-centos_linux64.tar.gz" "$url" # download binary
            tar xfz "sratoolkit.${version}-centos_linux64.tar.gz" --overwrite
            mv "sratoolkit.${version}-centos_linux64" "$target_dir"
        elif [ "$distro" == "debian" ]; then
            print_stderr "This is a x64 Debian based machine. Install binary directly."
            flag_install_binary=true
            url="https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/${version}/sratoolkit.${version}-ubuntu64.tar.gz"
            run_command wget --no-verbose -O "sratoolkit.${version}-ubuntu64.tar.gz" "$url" # download binary
            tar xfz "sratoolkit.${version}-ubuntu64.tar.gz" --overwrite
            mv "sratoolkit.${version}-ubuntu64" "$target_dir"
        fi
    fi

    # if the binary is installed, skip the source code installation
    if [ "$flag_install_binary" != true ]; then
        print_stderr "This is not a x64 Fedora or Debian based machine. Install from source code."

        #region ncbi-vdb
        print_stderr "Building ncbi/ncbi-vdb $version"

        vdb_path="ncbi-vdb"
        wget --no-verbose -O "${vdb_path}.tar.gz" "https://github.com/ncbi/ncbi-vdb/archive/refs/tags/${version}.tar.gz"
        tar xfz "${vdb_path}.tar.gz" --overwrite
        mv "${vdb_path}-${version}" "${vdb_path}"

        # $tmp_dir/ncbi-vdb
        cd "${vdb_path}"
        ./configure --build-prefix="${tmp_dir}/build"
        run_command make

        # $tmp_dir
        cd ..
        #endregion

        #region sra-tools
        print_stderr "Building ncbi/sra-tools $version"
        sra_path="sra-tools"
        wget --no-verbose -O "${sra_path}.tar.gz" "https://github.com/ncbi/sra-tools/archive/refs/tags/${version}.tar.gz"
        tar xfz "${sra_path}.tar.gz" --overwrite
        mv "${sra_path}-${version}" "${sra_path}"

        # $tmp_dir/sra-tools
        cd "${sra_path}"
        ./configure --build-prefix="${tmp_dir}/build" --prefix="$target_dir"
        run_command make # make sure ncbi-vdb in the same parent folder
        make install
        #endregion
    fi
}

special_modulefiles() {
    # Any additional modulefile operations: add environment variables, aliases, etc.
    # app_root is a special variable that points to the app directory in modulefile[.lua]
    return
}

# Available variables:
# - ncpu: number of cores to use (default: 4) will be overwritten by SLURM_CPUS_PER_TASK

# - app_name:         name     of the app
# - version:          version  of the app
# - app_name_version: name/version

# - target_base_dir:  modules/apps/name
# - target_dir:       modules/apps/name/version
# - script_path:      modules/modulefiles/name/version
# - tmp_dir:          tmp directory (modules/tmp/name/version)

RED='\033[0;91m'    # Red      WARNING or ERROR
BLUE='\033[0;94m'   # Blue     Dependency or Modulefile Changes
YELLOW='\033[0;93m' # Yellow   App Name and/or Version
NC='\033[0m'        # No Color

if ! [ -d build-scripts ]; then
    printf "Please run this script under ${RED}modules${NC} directory.\n" 1>&2
    printf "And make sure you have your scripts in build-scripts folder.\n" 1>&2
    printf "    e.g. bash build-scripts/sra-tools/3.1.1\n" 1>&2
    exit 1
fi

source "build-scripts/common.sh"
main $@
